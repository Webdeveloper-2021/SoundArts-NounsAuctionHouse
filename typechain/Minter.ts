/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MinterInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "finalizeReveal()": FunctionFragment;
    "flipSaleState()": FunctionFragment;
    "flipSignedMintState()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hashTransaction(address,uint256,bytes32)": FunctionFragment;
    "maxBlockPurchase()": FunctionFragment;
    "maxWalletPurchase()": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintSigner()": FunctionFragment;
    "nonces(bytes32)": FunctionFragment;
    "payee(uint256)": FunctionFragment;
    "price()": FunctionFragment;
    "provenance()": FunctionFragment;
    "release(address)": FunctionFragment;
    "released(address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reserveTokens(uint256)": FunctionFragment;
    "revealTimestamp()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "saleIsActive()": FunctionFragment;
    "setMaxBlockPurchase(uint256)": FunctionFragment;
    "setMaxWalletPurchase(uint256)": FunctionFragment;
    "setMintSigner(address)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setProvenance(bytes32)": FunctionFragment;
    "setRevealTime(uint256)": FunctionFragment;
    "shares(address)": FunctionFragment;
    "signedMint(uint256,uint256,bytes,bytes32)": FunctionFragment;
    "signedMintIsActive()": FunctionFragment;
    "startingIndex()": FunctionFragment;
    "startingIndexBlock()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "tokenContract()": FunctionFragment;
    "totalReleased(address)": FunctionFragment;
    "totalShares()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeReveal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flipSaleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flipSignedMintState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTransaction",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBlockPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxWalletPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "payee", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provenance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "released",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "saleIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBlockPurchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWalletPurchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvenance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevealTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "signedMint",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMintIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startingIndexBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipSaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipSignedMintState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBlockPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWalletPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provenance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBlockPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWalletPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProvenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevealTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signedMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMintIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingIndexBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;

  events: {
    "ERC20PaymentReleased(address,address,uint256)": EventFragment;
    "LogMint(address,uint256,uint256,uint256)": EventFragment;
    "LogPriceUpdated(uint256)": EventFragment;
    "PayeeAdded(address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "PaymentReleased(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type ERC20PaymentReleasedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; to: string; amount: BigNumber }
>;

export type ERC20PaymentReleasedEventFilter =
  TypedEventFilter<ERC20PaymentReleasedEvent>;

export type LogMintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    price: BigNumber;
    numberMinted: BigNumber;
    totalMinted: BigNumber;
  }
>;

export type LogMintEventFilter = TypedEventFilter<LogMintEvent>;

export type LogPriceUpdatedEvent = TypedEvent<
  [BigNumber],
  { newPrice: BigNumber }
>;

export type LogPriceUpdatedEventFilter = TypedEventFilter<LogPriceUpdatedEvent>;

export type PayeeAddedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; shares: BigNumber }
>;

export type PayeeAddedEventFilter = TypedEventFilter<PayeeAddedEvent>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export type PaymentReleasedEvent = TypedEvent<
  [string, BigNumber],
  { to: string; amount: BigNumber }
>;

export type PaymentReleasedEventFilter = TypedEventFilter<PaymentReleasedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    finalizeReveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flipSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flipSignedMintState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashTransaction(
      sender: string,
      numberOfTokens: BigNumberish,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    maxBlockPurchase(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWalletPurchase(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      numberOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintSigner(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    provenance(overrides?: CallOverrides): Promise<[string]>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveTokens(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revealTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    setMaxBlockPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxWalletPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProvenance(
      provenanceHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevealTime(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    signedMint(
      numberOfTokens: BigNumberish,
      maxPermitted: BigNumberish,
      signature: BytesLike,
      nonce: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signedMintIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    startingIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    startingIndexBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<[string]>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalReleased()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  finalizeReveal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flipSaleState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flipSignedMintState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashTransaction(
    sender: string,
    numberOfTokens: BigNumberish,
    nonce: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  maxBlockPurchase(overrides?: CallOverrides): Promise<BigNumber>;

  maxWalletPurchase(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    numberOfTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintSigner(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  provenance(overrides?: CallOverrides): Promise<string>;

  "release(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "release(address,address)"(
    token: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "released(address,address)"(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "released(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveTokens(
    num: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revealTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleIsActive(overrides?: CallOverrides): Promise<boolean>;

  setMaxBlockPurchase(
    newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxWalletPurchase(
    newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintSigner(
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProvenance(
    provenanceHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevealTime(
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  signedMint(
    numberOfTokens: BigNumberish,
    maxPermitted: BigNumberish,
    signature: BytesLike,
    nonce: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signedMintIsActive(overrides?: CallOverrides): Promise<boolean>;

  startingIndex(overrides?: CallOverrides): Promise<BigNumber>;

  startingIndexBlock(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sweep(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenContract(overrides?: CallOverrides): Promise<string>;

  "totalReleased(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    finalizeReveal(overrides?: CallOverrides): Promise<void>;

    flipSaleState(overrides?: CallOverrides): Promise<void>;

    flipSignedMintState(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashTransaction(
      sender: string,
      numberOfTokens: BigNumberish,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    maxBlockPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      numberOfTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintSigner(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    provenance(overrides?: CallOverrides): Promise<string>;

    "release(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveTokens(num: BigNumberish, overrides?: CallOverrides): Promise<void>;

    revealTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    saleIsActive(overrides?: CallOverrides): Promise<boolean>;

    setMaxBlockPurchase(
      newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxWalletPurchase(
      newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintSigner(signer: string, overrides?: CallOverrides): Promise<void>;

    setPrice(newPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProvenance(
      provenanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevealTime(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    signedMint(
      numberOfTokens: BigNumberish,
      maxPermitted: BigNumberish,
      signature: BytesLike,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signedMintIsActive(overrides?: CallOverrides): Promise<boolean>;

    startingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    startingIndexBlock(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenContract(overrides?: CallOverrides): Promise<string>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ERC20PaymentReleased(address,address,uint256)"(
      token?: string | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;
    ERC20PaymentReleased(
      token?: string | null,
      to?: null,
      amount?: null
    ): ERC20PaymentReleasedEventFilter;

    "LogMint(address,uint256,uint256,uint256)"(
      sender?: string | null,
      price?: BigNumberish | null,
      numberMinted?: null,
      totalMinted?: null
    ): LogMintEventFilter;
    LogMint(
      sender?: string | null,
      price?: BigNumberish | null,
      numberMinted?: null,
      totalMinted?: null
    ): LogMintEventFilter;

    "LogPriceUpdated(uint256)"(newPrice?: null): LogPriceUpdatedEventFilter;
    LogPriceUpdated(newPrice?: null): LogPriceUpdatedEventFilter;

    "PayeeAdded(address,uint256)"(
      account?: null,
      shares?: null
    ): PayeeAddedEventFilter;
    PayeeAdded(account?: null, shares?: null): PayeeAddedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(from?: null, amount?: null): PaymentReceivedEventFilter;

    "PaymentReleased(address,uint256)"(
      to?: null,
      amount?: null
    ): PaymentReleasedEventFilter;
    PaymentReleased(to?: null, amount?: null): PaymentReleasedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeReveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flipSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flipSignedMintState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTransaction(
      sender: string,
      numberOfTokens: BigNumberish,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBlockPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    maxWalletPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      numberOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintSigner(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    payee(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    provenance(overrides?: CallOverrides): Promise<BigNumber>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveTokens(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revealTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxBlockPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxWalletPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProvenance(
      provenanceHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevealTime(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    signedMint(
      numberOfTokens: BigNumberish,
      maxPermitted: BigNumberish,
      signature: BytesLike,
      nonce: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signedMintIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    startingIndex(overrides?: CallOverrides): Promise<BigNumber>;

    startingIndexBlock(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalReleased()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeReveal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flipSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flipSignedMintState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTransaction(
      sender: string,
      numberOfTokens: BigNumberish,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBlockPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWalletPurchase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      numberOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payee(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provenance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "release(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "release(address,address)"(
      token: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "released(address,address)"(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "released(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveTokens(
      num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revealTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxBlockPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxWalletPurchase(
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProvenance(
      provenanceHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevealTime(
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signedMint(
      numberOfTokens: BigNumberish,
      maxPermitted: BigNumberish,
      signature: BytesLike,
      nonce: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signedMintIsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startingIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startingIndexBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweep(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalReleased(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalReleased()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
