/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Provenance, ProvenanceInterface } from "../Provenance";

const _abi = [
  {
    inputs: [],
    name: "provenance",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "revealTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startingIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startingIndexBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c80630f7309e814604b578063cb774d47146065578063e36d649814606d578063f62f3c11146075575b600080fd5b605360005481565b60405190815260200160405180910390f35b605360015481565b605360025481565b60536003548156fea26469706673582212207a11917cb1ca85fe65a96ac392bc01f0866a87a2b45a2254e28679cec18b43f764736f6c634300080a0033";

type ProvenanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProvenanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Provenance__factory extends ContractFactory {
  constructor(...args: ProvenanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Provenance> {
    return super.deploy(overrides || {}) as Promise<Provenance>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Provenance {
    return super.attach(address) as Provenance;
  }
  connect(signer: Signer): Provenance__factory {
    return super.connect(signer) as Provenance__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProvenanceInterface {
    return new utils.Interface(_abi) as ProvenanceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Provenance {
    return new Contract(address, _abi, signerOrProvider) as Provenance;
  }
}
